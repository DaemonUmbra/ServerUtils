plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '6.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

sourceSets {
    api
    generated
}

configurations {
    apiCompileClasspath.extendsFrom(minecraft)
}

version = modMinecraftVersion + "-" + modVersion
group = modGroup
archivesBaseName = modFileName

java.toolchain.languageVersion.set(JavaLanguageVersion.of(17))

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '1.19.2-2022.11.27-1.19.4'
    runs {
        client {
            workingDirectory file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'serverutilities'

            mods {
                serverutilities {
                    source sourceSets.main as SourceSet
                    source sourceSets.api as SourceSet
                }
            }
        }

        server {
            workingDirectory file('run')
            args 'nogui'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'serverutilities'

            mods {
                serverutilities {
                    source sourceSets.main as SourceSet
                    source sourceSets.api as SourceSet
                }
            }
        }
        gameTestServer {
            workingDirectory file('run')
            args 'nogui'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'serverutilities'

            mods {
                serverutilities {
                    source sourceSets.main as SourceSet
                    source sourceSets.api as SourceSet
                }
            }
        }

        data {
            workingDirectory file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'serverutilities', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                serverutilities {
                    source sourceSets.main as SourceSet
                    source sourceSets.api as SourceSet
                }
            }
        }
    }
}

repositories {
    mavenLocal()
    maven { url = 'https://maven.neoforged.net' }
    maven { url = 'https://maven.minecraftforge.net' }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${modMinecraftVersion}-${modForgeVersion}"
    implementation sourceSets.named('api').map { it.output }
}

tasks.register('apiJar', Jar.class) {
    from sourceSets.named('api').map {it.output }
    setArchiveClassifier 'api'
    manifest {
        attributes([
                "Specification-Title"     : "serverutilities",
                "Specification-Vendor"    : "ArrowsendGaming",
                "Specification-Version"   : "3.0.0"
        ])
    }
}

tasks.named('jar') {
    manifest {
        from tasks.named('apiJar', org.gradle.jvm.tasks.Jar).map {it.manifest }
        attributes([
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.tasks.named('jar', org.gradle.jvm.tasks.Jar).map { archiveVersion },
                "Implementation-Vendor"   : "DaemonUmbra",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.named('jar') {
    finalizedBy('reobfJar')
}

publishing {
    publications {
        register('mavenJava', MavenPublication.class) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
